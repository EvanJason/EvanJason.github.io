"use strict";(self.webpackChunklwl_docusaurus_website=self.webpackChunklwl_docusaurus_website||[]).push([[5587],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=r.createContext({}),s=function(e){var n=r.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(m.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=s(t),p=a,f=c["".concat(m,".").concat(p)]||c[p]||u[p]||o;return t?r.createElement(f,l(l({ref:n},d),{},{components:t})):r.createElement(f,l({ref:n},d))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=p;var i={};for(var m in n)hasOwnProperty.call(n,m)&&(i[m]=n[m]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},635:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const o={title:"\u5c01\u88c5Antd\u57fa\u7840\u8868\u5355",categories:["React","antd","Typescript","Form"],tags:["React","antd","Typescript","Form"],date:"2023-07-22",authors:"lin",excerpt:"\u5c01\u88c5Antd\u57fa\u7840\u8868\u5355"},l="\u5c01\u88c5Antd\u57fa\u7840\u8868\u5355",i={unversionedId:"React/\u5c01\u88c5Antd\u57fa\u7840\u8868\u5355",id:"React/\u5c01\u88c5Antd\u57fa\u7840\u8868\u5355",title:"\u5c01\u88c5Antd\u57fa\u7840\u8868\u5355",description:"\u5c01\u88c5\u81ea\u5b9a\u4e49\u8868\u5355",source:"@site/docs/React/\u5c01\u88c5Antd\u57fa\u7840\u8868\u5355.md",sourceDirName:"React",slug:"/React/\u5c01\u88c5Antd\u57fa\u7840\u8868\u5355",permalink:"/docs/React/\u5c01\u88c5Antd\u57fa\u7840\u8868\u5355",draft:!1,editUrl:"https://github.com/evanjason/evanjason.github.io/tree/main/docs/React/\u5c01\u88c5Antd\u57fa\u7840\u8868\u5355.md",tags:[{label:"React",permalink:"/docs/tags/react"},{label:"antd",permalink:"/docs/tags/antd"},{label:"Typescript",permalink:"/docs/tags/typescript"},{label:"Form",permalink:"/docs/tags/form"}],version:"current",frontMatter:{title:"\u5c01\u88c5Antd\u57fa\u7840\u8868\u5355",categories:["React","antd","Typescript","Form"],tags:["React","antd","Typescript","Form"],date:"2023-07-22",authors:"lin",excerpt:"\u5c01\u88c5Antd\u57fa\u7840\u8868\u5355"},sidebar:"tutorialSidebar",previous:{title:"\u5173\u952e\u8bcd\u9ad8\u4eae\u51fd\u6570",permalink:"/docs/React/\u5173\u952e\u8bcd\u9ad8\u4eae\u51fd\u6570"},next:{title:"\u7b5b\u5e8f\u9879\u7236\u5b50\u6761\u4ef6\u5c01\u88c5\u7ec4\u4ef6",permalink:"/docs/React/\u7b5b\u5e8f\u9879\u7236\u5b50\u6761\u4ef6\u5c01\u88c5\u7ec4\u4ef6"}},m={},s=[{value:"\u5c01\u88c5\u81ea\u5b9a\u4e49\u8868\u5355",id:"\u5c01\u88c5\u81ea\u5b9a\u4e49\u8868\u5355",level:2},{value:"ContactForm\u7ec4\u4ef6",id:"contactform\u7ec4\u4ef6",level:2},{value:"\u4f7f\u7528\u793a\u4f8b",id:"\u4f7f\u7528\u793a\u4f8b",level:2}],d={toc:s},c="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u5c01\u88c5antd\u57fa\u7840\u8868\u5355"},"\u5c01\u88c5Antd\u57fa\u7840\u8868\u5355"),(0,a.kt)("h2",{id:"\u5c01\u88c5\u81ea\u5b9a\u4e49\u8868\u5355"},"\u5c01\u88c5\u81ea\u5b9a\u4e49\u8868\u5355"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Button, Checkbox, Col, DatePicker, Form, FormInstance, Input, Radio, Row, Select, Space, Spin } from 'antd'\nimport { Rule } from 'antd/es/form'\nimport React, { createRef, useEffect } from 'react'\nimport {CheckboxOptionType} from \"antd/es/checkbox/Group\";\nconst FormItem = Form.Item\n\nexport type formActionType = 'add' | 'edit' | 'del' | 'detail'\nexport interface formItemAttr {\n    label?: string\n    field: string\n    width?: React.CSSProperties['width']\n    options?: Array<{ label: React.ReactNode, value: React.Key }>\n    mode?: 'multiple' | 'tags'\n    initialValue?: any\n    rules?: Rule[]\n    placeholder?: string\n    disabled?: boolean\n    type: 'DATE' | 'INPUT' | 'SELECT' | 'CHECKBOX' | 'RADIO' | 'TEXTAREA' | 'CUSTOM'\n    render?: (formRef: React.RefObject<FormInstance<any>>, item: any) => React.ReactNode\n    allowClear?: boolean\n    maxLength?: number\n}\nexport interface IProps_BaseForm {\n    formList: Array<formItemAttr>;\n    onCancel: () => void\n    onOk: (formValue) => void\n    loading?: boolean\n    formItemLayout?: {\n        labelCol: { span: number },\n        wrapperCol: { span: number }\n    }\n    onValuesChange?: (changedValues, allValues) => void\n    footer?: React.ReactNode\n    footerStyle?: React.CSSProperties\n}\nconst BaseForm = (props: IProps_BaseForm) => {\n\n    const defaultLayout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 }\n    }\n    const { loading = false, formList, formItemLayout = defaultLayout, onOk, onCancel, footer, footerStyle } = props\n    const formRef = createRef<FormInstance>();\n    const handleOk = () => {\n        formRef.current?.validateFields().then((values) => {\n            onOk(values)\n        }).catch((errorInfo) => {\n            console.log(errorInfo)\n        })\n    }\n\n    useEffect(() => {\n        formRef.current?.setFieldsValue({\n            ...props.formList.reduce((pre, cur) => {\n                pre[cur.field] = cur.initialValue\n                return pre\n            }, {})\n        })\n        return () => {\n            formRef.current?.resetFields()\n        }\n    },[formList])\n\n    const handleFormValue = (changedValues, allValues) => {\n        props.onValuesChange?.(changedValues, allValues)\n    }\n    const renderFormList = () => {\n        return formList.map((item, index) => {\n            let label = item.label;\n            let field = item.field;\n            let initialValue = item.mode ? item.initialValue || [] : item.initialValue || null;\n            let placeholder = item.placeholder;\n            let width = item.width || 300;\n            let rules = item.rules || [];\n            let disabled = item.disabled || false;\n            switch (item.type) {\n                case 'DATE':\n                    return <FormItem label={label} name={field} initialValue={initialValue} key={field} rules={rules}>\n                        <DatePicker disabled={disabled} allowClear placeholder={placeholder} format=\"YYYY-MM-DD HH:mm:ss\" />\n                    </FormItem>\n                case 'INPUT':\n                    return <FormItem label={label} name={field} initialValue={initialValue} key={field} rules={rules}>\n                        <Input type=\"text\" disabled={disabled} showCount maxLength={item.maxLength || 50} placeholder={placeholder} style={{ width }} />\n                    </FormItem>\n                case 'SELECT':\n                    return <FormItem label={label} name={[field]} initialValue={initialValue} key={field} rules={rules}>\n                        <Select\n                            mode={item.mode}\n                            maxTagCount={item.mode ? 1 : undefined}\n                            maxTagTextLength={item.mode ? 20 : undefined}\n                            style={{ width }}\n                            placeholder={placeholder}\n                            options={item.options || []}\n                            disabled={disabled}\n                            optionFilterProp=\"label\"\n                            allowClear={item.allowClear}\n                        />\n                    </FormItem>\n                case 'CHECKBOX':\n                    return <FormItem label={label} name={[field]} valuePropName=\"checked\" initialValue={initialValue} key={field} rules={rules}>\n                        <Space>\n                            <Checkbox.Group options={(item.options || []) as CheckboxOptionType[]} style={{ width }} disabled={disabled} />\n                        </Space>\n                    </FormItem>\n                case 'RADIO':\n                    return <FormItem label={label} name={[field]} initialValue={initialValue} key={field} rules={rules}>\n                        <Radio.Group disabled={disabled} options={(item.options || []) as CheckboxOptionType[]} style={{ width }} />\n                    </FormItem>\n                case 'TEXTAREA':\n                    return <FormItem label={label} name={[field]} initialValue={initialValue} key={field} rules={rules}>\n                        <Input.TextArea disabled={disabled} rows={4} placeholder={placeholder} style={{ width }} />\n                    </FormItem>\n                case 'CUSTOM':\n                    formRef.current?.setFieldsValue({ [field]: initialValue })\n                    return item.render(formRef, item)\n            }\n        })\n    }\n    if (formList.length === 0) return\n    return (\n        <Spin spinning={loading}>\n            <Form\n                layout=\"horizontal\"\n                ref={formRef}\n                scrollToFirstError\n                {...formItemLayout}\n                onValuesChange={handleFormValue}\n            >\n                {renderFormList()}\n            </Form>\n            {\n                footer ? footer : <Row justify=\"center\" style={{ marginTop: 50, width: '50%', ...footerStyle }}>\n                    <Col>\n                        <Button\n                            type=\"primary\"\n                            style={{ marginRight: 100, width: 120 }}\n                            shape=\"round\"\n                            onClick={handleOk}\n                        >\n                            \u786e\u8ba4\n                        </Button>\n                    </Col>\n                    <Col>\n                        <Button\n                            style={{ width: 120 }}\n                            shape=\"round\"\n                            onClick={onCancel}\n                        >\n                            \u53d6\u6d88\n                        </Button>\n                    </Col>\n                </Row>\n            }\n        </Spin>\n    )\n}\nexport default BaseForm\n")),(0,a.kt)("h2",{id:"contactform\u7ec4\u4ef6"},"ContactForm\u7ec4\u4ef6"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Button, Form, FormInstance, Input, Select, Space } from 'antd';\nimport React from 'react'\nimport {\n    PlusOutlined,\n    MinusCircleOutlined\n} from '@ant-design/icons';\nimport { sexArr } from 'components/customerManagement/constant';\nexport interface IProps_ContactForm {\n    field: string\n    data: any[]\n    formRef: React.RefObject<FormInstance<any>>\n}\nconst ContactForm = (props: IProps_ContactForm) => {\n    const { field, data, formRef } = props\n    const formItemLayout = {\n        labelCol: { span: 10 },\n        wrapperCol: { span: 14 }\n    }\n\n    return (\n        <Form.List name={field} initialValue={data}>\n            {(fields, { add, remove }) => (\n                <>\n                    {fields.map((field, index) => (\n                        <div key={field.key}>\n                            <Space align=\"baseline\" style={{ width: '100%', marginLeft: 135 }}>\n                                <Form.Item\n                                    {...field}\n                                    {...formItemLayout}\n                                    label={index === 0 ? '\u4e3b\u8054\u7cfb\u4eba' : `\u8054\u7cfb\u4eba${index}`}\n                                    name={[field.name, 'contactName']}\n                                    rules={[{\n                                        message: '',\n                                        required: true,\n                                        validator: async (_, value) => {\n                                            if (!value) {\n                                                return Promise.reject('');\n                                            }\n                                        }\n                                    }]}\n                                >\n                                    <Input placeholder='\u8bf7\u8f93\u5165\u8054\u7cfb\u4eba\u540d\u5b57' />\n                                </Form.Item>\n                                <Form.Item\n                                    noStyle\n                                    shouldUpdate={(prevValues, curValues) =>\n                                        prevValues.departmentTitle !== curValues.departmentTitle\n                                    }\n                                >\n                                    {() => (\n                                        <Form.Item\n                                            {...field}\n                                            name={[field.name, 'departmentTitle']}\n                                        >\n                                            <Input placeholder='\u8bf7\u8f93\u5165\u90e8\u95e8\u804c\u52a1' style={{ width: 150 }} />\n                                        </Form.Item>\n                                    )}\n                                </Form.Item>\n                                <Form.Item\n                                    noStyle\n                                    shouldUpdate={(prevValues, curValues) =>\n                                        prevValues.phoneNumber !== curValues.phoneNumber\n                                    }\n                                >\n                                    {() => (\n                                        <Form.Item\n                                            {...field}\n                                            name={[field.name, 'phoneNumber']}\n                                            rules={[\n                                                {\n                                                    required: true,\n                                                    message: '',\n                                                    validator: async (_, value) => {\n                                                        if (!value) {\n                                                            return Promise.reject();\n                                                        }\n                                                        if (value) {\n                                                            const reg = /^1[3-9]\\d{9}$/;\n                                                            if (!reg.test(value)) {\n                                                                return Promise.reject();\n                                                            }\n                                                            const curList: Array<{\n                                                                contactName: string\n                                                                departmentTitle: string\n                                                                phoneNumber: string\n                                                                sex: string\n                                                            }> = formRef?.current?.getFieldValue?.('contactsInfoList')\n                                                            if (curList.filter(item => item.phoneNumber === value).length > 1) {\n                                                                return Promise.reject();\n                                                            }\n                                                        }\n                                                    }\n                                                },\n                                            ]}\n\n                                        >\n                                            <Input placeholder='\u8bf7\u8f93\u5165\u624b\u673a\u53f7\u7801' style={{ width: 150 }} />\n                                        </Form.Item>\n                                    )}\n                                </Form.Item>\n                                <Form.Item\n                                    noStyle\n                                    shouldUpdate={(prevValues, curValues) =>\n                                        prevValues.sex !== curValues.sex\n                                    }\n                                >\n                                    {() => (\n                                        <Form.Item\n                                            {...field}\n                                            name={[field.name, 'sex']}\n                                            rules={[{ required: true, message: '' }]}\n                                        >\n                                            <Select\n                                                placeholder='\u8bf7\u9009\u62e9\u6027\u522b'\n                                                style={{ width: 150 }}\n                                                options={sexArr}\n                                            />\n                                        </Form.Item>\n                                    )}\n                                </Form.Item>\n                                {\n                                    index > 0 && <MinusCircleOutlined onClick={() => remove(field.name)} />\n                                }\n                            </Space>\n                        </div>\n                    ))}\n\n                    <Form.Item style={{ marginLeft: 235, width: 200 }}>\n                        <Button type=\"link\" onClick={() => add()} block icon={<PlusOutlined />}>\n                            \u6dfb\u52a0\u8054\u7cfb\u4eba\n                        </Button>\n                    </Form.Item>\n                </>\n            )}\n        </Form.List>\n    )\n}\nexport default ContactForm\n")),(0,a.kt)("h2",{id:"\u4f7f\u7528\u793a\u4f8b"},"\u4f7f\u7528\u793a\u4f8b"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Card, Divider } from 'antd'\nimport BaseForm, { formActionType, formItemAttr } from 'components/common/BaseForm'\nimport ContactForm from '../contactForm'\nimport { corporateTableItmes } from 'components/customerManagement/constant'\nimport { useEffect, useMemo, useState } from 'react'\n\nexport interface IProps_CorporateForm {\n    type: formActionType\n    data: corporateTableItmes\n    onCancel: () => void\n    onOk: (formValue) => void\n    loading?: boolean\n    serverList: any[]\n}\nconst CorporateForm = (props: IProps_CorporateForm) => {\n    const { loading, data, type, serverList } = props\n    const [formValue, setFormValue] = useState<any>(null)\n    useEffect(() => {\n        if (type === 'edit') {\n            setFormValue({\n                companyName: data?.companyName,\n                address: data?.address,\n                email: data?.email,\n                remark: data?.remark,\n                systemId: data?.systemIds?.length ? data.systemIds : undefined,\n                contactsInfoList: data?.contacts?.length ? data.contacts.map(item => ({\n                    contactName: item?.contactName,\n                    departmentTitle: item?.departmentTitle,\n                    phoneNumber: item?.phoneNumber,\n                    sex: item?.sex\n                })) : [{\n                    contactName: undefined,\n                    departmentTitle: undefined,\n                    phoneNumber: undefined,\n                    sex: undefined,\n                }],\n            })\n        }\n    }, [data])\n\n    const formList = useMemo(() => {\n        const list: Array<formItemAttr> = [\n            {\n                type: 'INPUT',\n                label: '\u4f01\u4e1a\u540d\u79f0',\n                field: 'companyName',\n                placeholder: '\u8bf7\u8f93\u5165\u4f01\u4e1a\u540d\u79f0',\n                initialValue: formValue?.companyName,\n                rules: [\n                    {\n                        required: true,\n                    }\n                ]\n            },\n            {\n                type: 'INPUT',\n                label: '\u4f01\u4e1a\u90ae\u7bb1',\n                field: 'email',\n                placeholder: '\u8bf7\u8f93\u5165\u4f01\u4e1a\u90ae\u7bb1',\n                initialValue: formValue?.email,\n                rules: [\n                    {\n                        required: true,\n                        type: 'email',\n                    }\n                ]\n            },\n            {\n                type: 'INPUT',\n                label: '\u4f01\u4e1a\u5730\u5740',\n                field: 'address',\n                placeholder: '\u8bf7\u8f93\u5165\u4f01\u4e1a\u5730\u5740',\n                initialValue: formValue?.address,\n                rules: [\n                    {\n                        required: true,\n                    }\n                ]\n            },\n            {\n                type: 'SELECT',\n                label: '\u670d\u52a1\u5668\u7f16\u53f7',\n                field: 'systemId',\n                placeholder: '\u8bf7\u9009\u62e9\u670d\u52a1\u5668\u7f16\u53f7',\n                initialValue: formValue?.systemId,\n                mode: 'multiple',\n                options: serverList,\n                rules: [\n                    {\n                        required: false,\n                    }\n                ]\n            },\n            {\n                type: 'TEXTAREA',\n                label: '\u5907\u6ce8',\n                field: 'remark',\n                placeholder: '\u8bf7\u8f93\u5165\u5907\u6ce8',\n                initialValue: formValue?.remark,\n            },\n            {\n                type: 'CUSTOM',\n                field: 'contactsInfoList',\n                initialValue: formValue?.contactsInfoList || [{\n                    contactName: undefined,\n                    departmentTitle: undefined,\n                    phoneNumber: undefined,\n                    sex: undefined,\n                }],\n                render: (formRef, record) => {\n                    return <div>\n                        <Divider style={{ width: '50%', minWidth: '50%' }} />\n                        <ContactForm\n                            field={record.field}\n                            data={record?.initialValue}\n                            formRef={formRef}\n                        />\n                    </div>\n                }\n            }\n        ]\n        return list\n    }, [formValue])\n\n    return (\n        <Card\n            bodyStyle={{ height: 800, overflow: 'hidden auto' }}\n        >\n            <div>\n                <BaseForm\n                    formList={formList}\n                    formItemLayout={{\n                        labelCol: { span: 4 },\n                        wrapperCol: { span: 14 }\n                    }}\n                    onCancel={props.onCancel}\n                    onOk={props.onOk}\n                    loading={loading}\n                    footerStyle={{ width: '50%' }}\n                />\n            </div>\n        </Card>\n    )\n}\nexport default CorporateForm\n")))}u.isMDXComponent=!0}}]);